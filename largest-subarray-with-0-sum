/*Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
*/

import java.util.*;
public class SubsetofArray{

public static int maxLen(int arr[], int n)
    {
        int sum=0;
        int length=0;
        HashMap<Integer,Integer>map=new HashMap<>();
        //in -1th index sum is zero
        map.put(0,-1);
        for(int i=0;i<n;i++){
            sum=sum+arr[i];
            //add sum and index to map
            //if sum repeats in map that means subarray in between evaluates to zero
            if(map.containsKey(sum)){
                //curr index - initially found sum value index
                int newlen=i-map.get(sum);
                if(newlen>length){
                    length=newlen;
                }
            }
            else{
                map.put(sum,i);
            }
        }
        return length;
    }
public static void main(String[] args){
    int[] a1={1,-2,-1,3,-4,-2,3};
    System.out.println(maxLen(a1,a1.length));
}
}
