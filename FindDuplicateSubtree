import java.util.*;
public class TreeDS {
    //define tree node data,left childs, right childs
    public static class Node {
        int data;
        Node left;
        Node right;
        public Node(int d) {
            this.data=d;
            this.left=null;
            this.right=null;
        }
    }
    //define binaryTree curr node index -1
    //if node value !=-1
    //create a new node
    //form it left and right subtree recursively
    //return root node
    public static class BinaryTree {
        int idx=-1;
        public  Node BuildTree(int[] nodes) {
            idx=idx+1;
            if(nodes[idx]==-1) {
                return null;
            }
            Node newNode=new Node(nodes[idx]);
            newNode.left=BuildTree(nodes);
            newNode.right=BuildTree(nodes);
            return newNode;
        }
    }

    public static int PostTraversal(Node curr,HashMap<String,Integer>map) {
        if(curr.left==null && curr.right==null) {
            return curr.data;
        }
        int leftdata=PostTraversal(curr.left,map);
        int rightdata=PostTraversal(curr.right,map);
        String sum="";
        sum=sum+leftdata;
        sum=sum+rightdata;
        sum=sum+curr.data;
        if(map.containsKey(sum)) {
            map.put(sum,map.get(sum)+1);
        } else {
            map.put(sum,1);
        }

        return 0;

    }

    public static String findDuplicateSubtree(Node root) {
        HashMap<String,Integer> nodeOrder=new  HashMap<String,Integer>();

        PostTraversal(root,nodeOrder);
        for(Map.Entry<String,Integer> i:nodeOrder.entrySet()) {
            if(i.getValue()>1) {
                return "Yes";
            }
        }
        return "No";
    }

    public static void main(String[] args) {
        int[] nodes= {1,2,4,-1,-1,5,-1,-1,3,2,4,-1,-1,5,-1,-1,9,2,4,-1,-1,5,-1,-1,8,-1,-1};
        BinaryTree tree=new BinaryTree();

        Node root=tree.BuildTree(nodes);
        System.out.println(findDuplicateSubtree(root));


    }
}
