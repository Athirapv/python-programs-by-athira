
/*
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.


Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

*/


class Solution {
    public boolean checkInclusion(String s1, String s2) {
       //sort s1 and check for each substring in s2 where length is of s1 if sorted substring matches with s1
       s1=sort(s1);
       for(int i=0;i<=s2.length()-s1.length();i++){
           if(s1.equals(sort(s2.substring(i,i+s1.length())))){
               return true;
           }
       }
       return false;
       
    }
    public String sort(String s1){
        char[] charArr=s1.toCharArray();
        Arrays.sort(charArr);
        return new String(charArr);

    }
}
