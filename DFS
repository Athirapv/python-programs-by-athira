import java.util.*;
public class DFS {

    public static class Edge {
        int src;
        int dest;
        public Edge(int s,int d) {
            this.src=s;
            this.dest=d;

        }
    }

    public static void createGraph(ArrayList<Edge> graph[],int V) {

        for (int i=0; i<V; i++) {
            graph[i]=new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0,1));
        graph[0].add(new Edge(0,2));
        graph[1].add(new Edge(1,3));
        graph[1].add(new Edge(1,0));
        graph[2].add(new Edge(2,4));
        graph[2].add(new Edge(2,0));

        graph[3].add(new Edge(3,1));
        graph[3].add(new Edge(3,5));
        graph[3].add(new Edge(3,4));

        graph[4].add(new Edge(4,3));
        graph[4].add(new Edge(4,2));
        graph[4].add(new Edge(4,5));
        graph[5].add(new Edge(5,3));
        graph[5].add(new Edge(5,4));
        graph[5].add(new Edge(5,6));
        graph[6].add(new Edge(6,5));

    }

    
    
    public static void DFS(ArrayList<Edge>graph[],boolean[] visited,int currNode){
        //Base case if currNode not visited
        if(visited[currNode]==true){
            return;
        }
        //Small calc print start node and mark visited
        System.out.print(currNode+" ");
        visited[currNode]=true;
        //Recusion call DFS for currNode edge nodes
        for(int i=0;i<graph[currNode].size();i++){
            Edge e=graph[currNode].get(i);
            DFS(graph,visited,e.dest);
        }
    }

    public static void main(String[] args) {
        //Create a graph
        int vertices=7;
        ArrayList<Edge> graph[]=new ArrayList[vertices];
        createGraph(graph,vertices);
        //visited array
        boolean[] visited=new boolean[vertices];
        //call DFS for graph travesal
        for(int i=0;i<vertices;i++){
            DFS(graph,visited,i);
        }
    }
}
