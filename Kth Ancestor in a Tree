import java.util.*;
public class Tree{
    public static class Node{
        int data;
        Node left;
        Node right;
        public Node(int d){
            this.data=d;
			this.left=null;
			this.right=null;
        }
    }
    
	public static class BinaryTree{
		int idx=-1;
		public Node BuildTree(int[] nodes){
			idx=idx+1;
			if(nodes[idx]==-1){
				return null;
			}
			Node newNode=new Node(nodes[idx]);
			newNode.left=BuildTree(nodes);
			newNode.right=BuildTree(nodes);
			return newNode;
		
		}
	
	}
	
	public static int postorderTraversal(Node curr, ArrayList<Integer> roots, int target){
		if(curr==null){
		 return 0;
		}
		if(curr.data==target){
		    return 1;
		}
		int leftValue=postorderTraversal(curr.left,roots,target);
			int rightValue=postorderTraversal(curr.right,roots,target);
			
		 
		if(leftValue==1||rightValue==1){
		    roots.add(curr.data); 
		    return 1;
		}
		return 0;
	}
	
	public static int findancestor(Node root,int ancestorIndex,int target){
	ArrayList<Integer>roots=new ArrayList<Integer>();
		//traverse and add root nodes in roots array of target node
		postorderTraversal(root,roots,target);
		//find ancestor in roots in array
		if(ancestorIndex<=roots.size()){
		    return roots.get(ancestorIndex-1);
		}
	return -1;
	}
	
	public static void main(String[] args){
		int[] nodes={4,2,-1,-1,7,9,1,-1,-1,-1,10,-1,-1};
		BinaryTree tree= new BinaryTree();
		Node root=tree.BuildTree(nodes);
		int ancestorIndex=3;
		int target=1;
		System.out.println(findancestor(root,ancestorIndex,target));
		
	}
    
}
