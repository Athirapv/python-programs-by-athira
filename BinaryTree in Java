import java.util.*;
public class TreeDS {
    //define tree node data,left childs, right childs
    public static class Node {
        int data;
        Node left;
        Node right;
        public Node(int d) {
            this.data=d;
            this.left=null;
            this.right=null;
        }
    }
    //define binaryTree curr node index -1
    //if node value !=-1
    //create a new node
    //form it left and right subtree recursively
    //return root node
    public static class BinaryTree {
        int idx=-1;
        public  Node BuildTree(int[] nodes) {
            idx=idx+1;
            if(nodes[idx]==-1) {
                return null;
            }
            Node newNode=new Node(nodes[idx]);
            newNode.left=BuildTree(nodes);
            newNode.right=BuildTree(nodes);
            return newNode;
        }
    }

    public static void PreorderTraversal(Node curr) {
        if(curr==null) {
            return;
        }
        System.out.println(curr.data);
        PreorderTraversal(curr.left);
        PreorderTraversal(curr.right);
    }

    public static void LevelOrderTraversal(Node curr) {
        Queue<Node>queue=new LinkedList<>();
        if(curr==null) {
            return;
        }
        queue.add(curr);
        queue.add(new Node(-1));
        while(!queue.isEmpty()) {
            Node node=queue.remove();
            if(node.data==-1) {
                System.out.println();
                if(!queue.isEmpty()) {
                    queue.add(new Node(-1));
                }
            } else {
                System.out.print(node.data);

            }
            if(node.left!=null) {
                queue.add(node.left);
            }
            if(node.right!=null) {
                queue.add(node.right);
            }

        }
    }

    public static void main(String[] args) {
        int[] nodes= {1,2,-1,5,-1,-1,3,4,-1,-1,-1};
        BinaryTree tree=new BinaryTree();
        Node root=tree.BuildTree(nodes);
        System.out.println("Pre Order Traversal");
        PreorderTraversal(root);
        System.out.println("Level Order Traversal");
        LevelOrderTraversal(root);
    }
}
