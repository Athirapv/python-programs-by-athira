/*
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
*/

class Solution {
    public boolean checkInclusion(String s1, String s2) {
       
        return this.permutationsofS1(s1,s2,0);
    }
    public boolean permutationsofS1(String s1,String s2,int currIndex){
        if(s1.length()==1 && s2.contains(s1)){
            return true;
        }
        if(currIndex==s1.length() && s2.contains(s1)){
            return true;
        }
        //from curr index swap curr index item to next index and add them in ans
        for(int i=currIndex;i<s1.length();i++){
           
            StringBuilder sb = new StringBuilder(s1);
            sb.setCharAt(currIndex, s1.charAt(i));
            sb.setCharAt(i, s1.charAt(currIndex));
            boolean ans=permutationsofS1(sb.toString(),s2,currIndex+1);

            if(ans){
                return true;
            }

        }
        return false;

    }
}
