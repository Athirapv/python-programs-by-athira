//print all paths from Source to target
//src=0, tar=5
    1 --  3
  /      |  \
0        4 --5---6
\        /
     2
import java.util.*;
public class FundAllPathsStoT {
    public static class Edge {
        int src;
        int dest;
        public Edge(int s, int d) {
            this.src=s;
            this.dest=d;
        }
    }

    public static void createGraph(ArrayList<Edge>graph[], int vertex) {
        for(int i=0; i<vertex; i++) {
            graph[i]=new ArrayList<Edge>(); //initialize edge list in graph vertex array
        }

        graph[0].add(new Edge(0,1));
        graph[0].add(new Edge(0,2));
        graph[1].add(new Edge(1,3));
        graph[1].add(new Edge(1,0));
        graph[2].add(new Edge(2,4));
        graph[2].add(new Edge(2,0));

        graph[3].add(new Edge(3,1));
        graph[3].add(new Edge(3,5));
        graph[3].add(new Edge(3,4));

        graph[4].add(new Edge(4,3));
        graph[4].add(new Edge(4,2));
        graph[4].add(new Edge(4,5));
        graph[5].add(new Edge(5,3));
        graph[5].add(new Edge(5,4));
        graph[5].add(new Edge(5,6));
        graph[6].add(new Edge(6,5));
    }

    public static void FindAllPaths(ArrayList<Edge>graph[], int src, int target,boolean[] visited,String path) {
        //base case to print all paths on reaching target
        if(src==target) {
            System.out.println(path);
            return;
        }
        //recursively call other nodes of curr node
        for(int i=0; i<graph[src].size(); i++) {
            Edge e=graph[src].get(i);
            if(!visited[e.dest]) {
                visited[src]=true;
               
                FindAllPaths(graph,e.dest,target,visited,path+e.dest);
                //backtrack if vertex doesn't reach target
                visited[src]=false;
            }
        }
    }


    public static void main (String[] args) {

        int vertex=7;
        ArrayList<Edge>graph[]=new ArrayList[vertex];
        boolean[] visitied=new boolean[vertex];
        //create graph
        createGraph(graph,vertex);
        FindAllPaths(graph,0,5,visitied,"0");
    }

}
