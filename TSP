import java.util.*;
public class GraphTSP{

public static class Edge{
	int src;
	int dest;
	int weight;
	public Edge(int src, int dest, int wt){
		this.src=src;
		this.dest=dest;
		this.weight=wt;
}
}
//Build Graph
public static void BuildGraph(ArrayList<Edge> graph[], int vertex){
	for(int i =0;i<vertex;i++){
		graph[i]=new ArrayList<Edge>();
}
graph[0].add(new Edge(0,1,10));
graph[0].add(new Edge(0,2,20));
graph[0].add(new Edge(0,3,30));
graph[1].add(new Edge(1,0,10));
graph[1].add(new Edge(1,2,20));
graph[1].add(new Edge(1,3,25));
graph[2].add(new Edge(2,0,15));
graph[2].add(new Edge(2,1,30));
graph[2].add(new Edge(2,3,10));
graph[3].add(new Edge(3,0,20));
graph[3].add(new Edge(3,1,15));
graph[3].add(new Edge(3,2,40));
}

public static void TPS(ArrayList<Edge> graph[], int curr,String path,int sum,boolean[] visited,int index,HashMap<String,Integer>map,int start,int V){
    if(index==V-1){
         for(int i=0; i<graph[curr].size();i++){
             Edge e=graph[curr].get(i);
             if(e.dest==start){
                 path=path+e.dest;
                 sum=sum+e.weight;
             }
         }
        map.put(path,sum);
        return;
    }
    visited[curr]=true;
    
    for(int i=0; i<graph[curr].size();i++){
        Edge e=graph[curr].get(i);
        
        if(!visited[e.dest]){
            TPS(graph,e.dest,path+e.dest,sum+e.weight,visited,index+1,map,start,V);
        }
    }
   visited[curr]=false;
}

public static void main(String[] args){
	int V=4;
	ArrayList<Edge> graph[]=new ArrayList[V];
	BuildGraph(graph,V);
	HashMap<String,Integer>map=new HashMap<>();
	boolean[] visited=new boolean[V];
	for(int i=0;i<V;i++){
	TPS(graph,i,""+i,0,visited,0,map,i,V);
	}
	int low=100000;
	String path="";
	for(Map.Entry<String,Integer>e :map.entrySet()){
	    if(e.getValue()<low){
	        low=e.getValue();
	        path=e.getKey();
	    }
	}
	System.out.println(low+" "+path);

}
}
